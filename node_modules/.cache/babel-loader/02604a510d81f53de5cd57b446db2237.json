{"ast":null,"code":"const MEDIA_MANAGER_CACHE = new WeakMap();\n\nfunction _getMediaQuery(media, index) {\n  if (index === 0) {\n    return `screen and (max-width: ${media[index] - 1}px)`;\n  }\n\n  if (index === media.length) {\n    return `screen and (min-width: ${media[index - 1]}px)`;\n  }\n\n  return `screen and (min-width: ${media[index - 1]}px) and (max-width: ${media[index] - 1}px)`;\n}\n\nfunction _createMediaManager(media) {\n  const mediaLen = media.length;\n  const sizes = [];\n\n  if (typeof window !== \"undefined\") {\n    for (let index = mediaLen; index > -1; index -= 1) {\n      const mediaQuery = _getMediaQuery(media, index);\n\n      sizes.push({\n        index,\n        mq: window.matchMedia(mediaQuery)\n      });\n    }\n  }\n\n  const getCurrentIndex = () => {\n    for (const {\n      index,\n      mq\n    } of sizes) {\n      if (mq.matches) return index;\n    }\n\n    return 0;\n  };\n\n  const subscribe = subscriber => {\n    const disposeFns = [];\n\n    for (const {\n      index,\n      mq\n    } of sizes) {\n      const handleChange = () => {\n        if (mq.matches) subscriber(index);\n      };\n\n      if (mq.addEventListener) {\n        mq.addEventListener(\"change\", handleChange);\n      } else {\n        mq.addListener(handleChange);\n      }\n\n      disposeFns.push(() => {\n        if (mq.removeEventListener) {\n          mq.removeEventListener(\"change\", handleChange);\n        } else {\n          mq.removeListener(handleChange);\n        }\n      });\n    }\n\n    return () => {\n      for (const disposeFn of disposeFns) {\n        disposeFn();\n      }\n    };\n  };\n\n  return {\n    getCurrentIndex,\n    subscribe\n  };\n}\n\nfunction _getMediaManager(media) {\n  let manager = MEDIA_MANAGER_CACHE.get(media);\n\n  if (!manager) {\n    manager = _createMediaManager(media);\n    MEDIA_MANAGER_CACHE.set(media, manager);\n  }\n\n  return manager;\n}\n\nexport { _getMediaManager };","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/node_modules/@sanity/ui/lib/esm/hooks/useMediaIndex/lib/media.js"],"names":["MEDIA_MANAGER_CACHE","WeakMap","_getMediaQuery","media","index","length","_createMediaManager","mediaLen","sizes","window","mediaQuery","push","mq","matchMedia","getCurrentIndex","matches","subscribe","subscriber","disposeFns","handleChange","addEventListener","addListener","removeEventListener","removeListener","disposeFn","_getMediaManager","manager","get","set"],"mappings":"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","sourcesContent":["const MEDIA_MANAGER_CACHE = new WeakMap();\nfunction _getMediaQuery(media, index) {\n  if (index === 0) {\n    return `screen and (max-width: ${media[index] - 1}px)`;\n  }\n  if (index === media.length) {\n    return `screen and (min-width: ${media[index - 1]}px)`;\n  }\n  return `screen and (min-width: ${media[index - 1]}px) and (max-width: ${media[index] - 1}px)`;\n}\nfunction _createMediaManager(media) {\n  const mediaLen = media.length;\n  const sizes = [];\n  if (typeof window !== \"undefined\") {\n    for (let index = mediaLen; index > -1; index -= 1) {\n      const mediaQuery = _getMediaQuery(media, index);\n      sizes.push({ index, mq: window.matchMedia(mediaQuery) });\n    }\n  }\n  const getCurrentIndex = () => {\n    for (const { index, mq } of sizes) {\n      if (mq.matches)\n        return index;\n    }\n    return 0;\n  };\n  const subscribe = (subscriber) => {\n    const disposeFns = [];\n    for (const { index, mq } of sizes) {\n      const handleChange = () => {\n        if (mq.matches)\n          subscriber(index);\n      };\n      if (mq.addEventListener) {\n        mq.addEventListener(\"change\", handleChange);\n      } else {\n        mq.addListener(handleChange);\n      }\n      disposeFns.push(() => {\n        if (mq.removeEventListener) {\n          mq.removeEventListener(\"change\", handleChange);\n        } else {\n          mq.removeListener(handleChange);\n        }\n      });\n    }\n    return () => {\n      for (const disposeFn of disposeFns) {\n        disposeFn();\n      }\n    };\n  };\n  return { getCurrentIndex, subscribe };\n}\nfunction _getMediaManager(media) {\n  let manager = MEDIA_MANAGER_CACHE.get(media);\n  if (!manager) {\n    manager = _createMediaManager(media);\n    MEDIA_MANAGER_CACHE.set(media, manager);\n  }\n  return manager;\n}\nexport {\n  _getMediaManager\n};\n"]},"metadata":{},"sourceType":"module"}