{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/ihartsykala/projects/playy/media_brouser_local_public/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { hexToRgb, hslToRgb } from \"./convert\";\nvar HEX_CHARS = \"0123456789ABCDEFabcdef\";\nvar HSL_RE = /hsl\\(\\s*(\\d+)\\s*,\\s*((\\d+(?:\\.\\d+)?)%)\\s*,\\s*((\\d+(?:\\.\\d+)?)%)\\s*\\)/i;\n\nfunction isHexChars(str) {\n  var _iterator = _createForOfIteratorHelper(str),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var c = _step.value;\n\n      if (HEX_CHARS.indexOf(c) === -1) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n\nfunction isHex(str) {\n  if (str[0] !== \"#\") return false;\n  if (!(str.length === 4 || str.length === 7)) return false;\n  return isHexChars(str.slice(1));\n}\n\nfunction parseHsl(str) {\n  var res = HSL_RE.exec(str);\n\n  if (!res) {\n    throw new Error(\"parseHsl: string is not a HSL color: \\\"\".concat(str, \"\\\"\"));\n  }\n\n  return {\n    h: parseInt(res[1]),\n    s: parseFloat(res[3]),\n    l: parseFloat(res[5])\n  };\n}\n\nfunction parseColor(color) {\n  if (!color) return {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n\n  if (typeof color !== \"string\") {\n    throw new Error(\"parseColor: expected a string\");\n  }\n\n  if (isHex(color)) {\n    return hexToRgb(color);\n  }\n\n  if (color.startsWith(\"hsl(\")) {\n    return hslToRgb(parseHsl(color));\n  }\n\n  throw new Error(\"parseColor: unexpected color format: \\\"\".concat(color, \"\\\"\"));\n}\n\nexport { parseColor };","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/node_modules/@sanity/ui/lib/esm/theme/lib/color-fns/parse.js"],"names":["hexToRgb","hslToRgb","HEX_CHARS","HSL_RE","isHexChars","str","c","indexOf","isHex","length","slice","parseHsl","res","exec","Error","h","parseInt","s","parseFloat","l","parseColor","color","r","g","b","startsWith"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,WAAnC;AACA,IAAMC,SAAS,GAAG,wBAAlB;AACA,IAAMC,MAAM,GAAG,uEAAf;;AACA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AAAA,6CACPA,GADO;AAAA;;AAAA;AACvB,wDAAqB;AAAA,UAAVC,CAAU;;AACnB,UAAIJ,SAAS,CAACK,OAAV,CAAkBD,CAAlB,MAAyB,CAAC,CAA9B,EAAiC;AAC/B,eAAO,KAAP;AACD;AACF;AALsB;AAAA;AAAA;AAAA;AAAA;;AAMvB,SAAO,IAAP;AACD;;AACD,SAASE,KAAT,CAAeH,GAAf,EAAoB;AAClB,MAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EACE,OAAO,KAAP;AACF,MAAI,EAAEA,GAAG,CAACI,MAAJ,KAAe,CAAf,IAAoBJ,GAAG,CAACI,MAAJ,KAAe,CAArC,CAAJ,EACE,OAAO,KAAP;AACF,SAAOL,UAAU,CAACC,GAAG,CAACK,KAAJ,CAAU,CAAV,CAAD,CAAjB;AACD;;AACD,SAASC,QAAT,CAAkBN,GAAlB,EAAuB;AACrB,MAAMO,GAAG,GAAGT,MAAM,CAACU,IAAP,CAAYR,GAAZ,CAAZ;;AACA,MAAI,CAACO,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,kDAAmDT,GAAnD,QAAN;AACD;;AACD,SAAO;AAAEU,IAAAA,CAAC,EAAEC,QAAQ,CAACJ,GAAG,CAAC,CAAD,CAAJ,CAAb;AAAuBK,IAAAA,CAAC,EAAEC,UAAU,CAACN,GAAG,CAAC,CAAD,CAAJ,CAApC;AAA8CO,IAAAA,CAAC,EAAED,UAAU,CAACN,GAAG,CAAC,CAAD,CAAJ;AAA3D,GAAP;AACD;;AACD,SAASQ,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAI,CAACA,KAAL,EACE,OAAO;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,CAAX;AAAcC,IAAAA,CAAC,EAAE;AAAjB,GAAP;;AACF,MAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIP,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,MAAIN,KAAK,CAACa,KAAD,CAAT,EAAkB;AAChB,WAAOrB,QAAQ,CAACqB,KAAD,CAAf;AACD;;AACD,MAAIA,KAAK,CAACI,UAAN,CAAiB,MAAjB,CAAJ,EAA8B;AAC5B,WAAOxB,QAAQ,CAACU,QAAQ,CAACU,KAAD,CAAT,CAAf;AACD;;AACD,QAAM,IAAIP,KAAJ,kDAAmDO,KAAnD,QAAN;AACD;;AACD,SACED,UADF","sourcesContent":["import { hexToRgb, hslToRgb } from \"./convert\";\nconst HEX_CHARS = \"0123456789ABCDEFabcdef\";\nconst HSL_RE = /hsl\\(\\s*(\\d+)\\s*,\\s*((\\d+(?:\\.\\d+)?)%)\\s*,\\s*((\\d+(?:\\.\\d+)?)%)\\s*\\)/i;\nfunction isHexChars(str) {\n  for (const c of str) {\n    if (HEX_CHARS.indexOf(c) === -1) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isHex(str) {\n  if (str[0] !== \"#\")\n    return false;\n  if (!(str.length === 4 || str.length === 7))\n    return false;\n  return isHexChars(str.slice(1));\n}\nfunction parseHsl(str) {\n  const res = HSL_RE.exec(str);\n  if (!res) {\n    throw new Error(`parseHsl: string is not a HSL color: \"${str}\"`);\n  }\n  return { h: parseInt(res[1]), s: parseFloat(res[3]), l: parseFloat(res[5]) };\n}\nfunction parseColor(color) {\n  if (!color)\n    return { r: 0, g: 0, b: 0 };\n  if (typeof color !== \"string\") {\n    throw new Error(\"parseColor: expected a string\");\n  }\n  if (isHex(color)) {\n    return hexToRgb(color);\n  }\n  if (color.startsWith(\"hsl(\")) {\n    return hslToRgb(parseHsl(color));\n  }\n  throw new Error(`parseColor: unexpected color format: \"${color}\"`);\n}\nexport {\n  parseColor\n};\n"]},"metadata":{},"sourceType":"module"}