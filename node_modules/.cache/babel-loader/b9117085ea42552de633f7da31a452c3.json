{"ast":null,"code":"var _jsxFileName = \"/home/ihartsykala/projects/playy/media_brouser_local_public/src/layouts/LayoutContainerDragAndDrop/LayoutContainerDragAndDrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { Box } from \"@sanity/ui\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"../../components/SingleImgComponent/itemTypes\";\nimport { findIndex } from \"../../components/ContainerMediaComponent/contentCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LayoutContainerDragAndDrop = ({\n  children,\n  contentCard,\n  setArrayContentCard,\n  arrayContentCard,\n  moveCard,\n  statusDragAndDrop\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const [{\n    handlerId\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId()\n      };\n    },\n\n    hover(item, monitor) {\n      var _ref$current;\n\n      if (!ref.current || !statusDragAndDrop) {\n        return;\n      }\n\n      const dragIndex = findIndex(item.id, arrayContentCard);\n      const hoverIndex = findIndex(contentCard.id, arrayContentCard); // Don't replace items with themselves\n\n      if (dragIndex === hoverIndex) {\n        return;\n      } // Determine rectangle on screen\n\n\n      const hoverBoundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect(); // Get vertical middle\n\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      const clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      } // Time to actually perform the action\n\n\n      if (moveCard) {\n        moveCard(dragIndex, hoverIndex, arrayContentCard, setArrayContentCard);\n      } // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      // let dropCard = findCard(dragIndex, arrayContentCard)\n      // const hoverCard = findCard(hoverIndex, arrayContentCard)\n      // dropCard  = {...hoverCard}\n\n    }\n\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ItemTypes.CARD,\n    item: () => {\n      return {\n        id: contentCard.id,\n        index: findIndex(contentCard.id, arrayContentCard)\n      };\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0.5 : 1;\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"layout-drag-and-drop__container\",\n    style: {\n      opacity\n    },\n    ref: ref,\n    \"data-handler-id\": handlerId,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LayoutContainerDragAndDrop, \"Qm3J2iS1kJow3QPxw5bk8iZMsrM=\", false, function () {\n  return [useDrop, useDrag];\n});\n\n_c = LayoutContainerDragAndDrop;\nexport default LayoutContainerDragAndDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutContainerDragAndDrop\");","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/src/layouts/LayoutContainerDragAndDrop/LayoutContainerDragAndDrop.tsx"],"names":["React","useRef","Box","useDrag","useDrop","ItemTypes","findIndex","LayoutContainerDragAndDrop","children","contentCard","setArrayContentCard","arrayContentCard","moveCard","statusDragAndDrop","ref","handlerId","drop","accept","CARD","collect","monitor","getHandlerId","hover","item","current","dragIndex","id","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","isDragging","drag","type","index","opacity"],"mappings":"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","sourcesContent":["import React, {useRef} from \"react\";\nimport {Box} from \"@sanity/ui\";\nimport {DropTargetMonitor, useDrag, useDrop} from \"react-dnd\";\nimport {ItemTypes} from \"../../components/SingleImgComponent/itemTypes\";\nimport {Dispatch, findCard, findIndex, InterfaceContentCard} from \"../../components/ContainerMediaComponent/contentCard\";\nimport {XYCoord} from \"dnd-core\";\n\ntype LayoutContainerDragAndDropProps = {\n    contentCard: InterfaceContentCard;\n    setArrayContentCard: Dispatch<InterfaceContentCard[]>;\n    arrayContentCard: InterfaceContentCard[];\n    moveCard?: (dragIndex: number, hoverIndex: number,\n    arrayContentCard: InterfaceContentCard[], setArrayContentCard: Dispatch<InterfaceContentCard[]>) => void;\n    statusDragAndDrop: boolean;\n}\n\nconst LayoutContainerDragAndDrop: React.FunctionComponent<LayoutContainerDragAndDropProps> = ({\n      children,\n      contentCard,\n      setArrayContentCard,\n      arrayContentCard,\n      moveCard,\n      statusDragAndDrop,\n    }) => {\n    const ref = useRef<HTMLDivElement>(null)\n\n    const [{handlerId}, drop] = useDrop({\n        accept: ItemTypes.CARD,\n        collect(monitor) {\n            return {\n                handlerId: monitor.getHandlerId(),\n            }\n        },\n        hover(item: InterfaceContentCard, monitor: DropTargetMonitor) {\n            if (!ref.current || !statusDragAndDrop) {\n                return\n            }\n            const dragIndex = findIndex(item.id, arrayContentCard)\n            const hoverIndex = findIndex(contentCard.id, arrayContentCard)\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return\n            }\n            // Determine rectangle on screen\n            const hoverBoundingRect = ref.current?.getBoundingClientRect()\n            // Get vertical middle\n            const hoverMiddleY =\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset()\n            // Get pixels to the top\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n            // Dragging downwards\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return\n            }\n            // Dragging upwards\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return\n            }\n            // Time to actually perform the action\n            if (moveCard) {\n                moveCard(dragIndex, hoverIndex, arrayContentCard, setArrayContentCard)\n            }\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            // let dropCard = findCard(dragIndex, arrayContentCard)\n            // const hoverCard = findCard(hoverIndex, arrayContentCard)\n            // dropCard  = {...hoverCard}\n        },\n    })\n\n    const [{isDragging}, drag] = useDrag({\n        type: ItemTypes.CARD,\n        item: () => {\n            return {id: contentCard.id, index: findIndex(contentCard.id, arrayContentCard)}\n        },\n        collect: (monitor: any) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    })\n\n    const opacity = isDragging ? 0.5 : 1\n    drag(drop(ref))\n\n    return (\n        <Box\n            className={\"layout-drag-and-drop__container\"}\n            style={{opacity}}\n            ref={ref}\n            data-handler-id={handlerId}\n        >\n            {children}\n        </Box>\n    )\n}\n\nexport default LayoutContainerDragAndDrop"]},"metadata":{},"sourceType":"module"}