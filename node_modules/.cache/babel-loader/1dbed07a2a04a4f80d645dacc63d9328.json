{"ast":null,"code":"import _slicedToArray from\"/home/ihartsykala/projects/playy/media_brouser_local_public/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef}from\"react\";import{Box}from\"@sanity/ui\";import{useDrag,useDrop}from\"react-dnd\";import{ItemTypes}from\"../../components/SingleImgComponent/itemTypes\";import{findIndex}from\"../../components/ContainerMediaComponent/contentCard\";import{jsx as _jsx}from\"react/jsx-runtime\";var LayoutContainerDragAndDrop=function LayoutContainerDragAndDrop(_ref){var children=_ref.children,contentCard=_ref.contentCard,setArrayContentCard=_ref.setArrayContentCard,arrayContentCard=_ref.arrayContentCard,moveCard=_ref.moveCard,statusDragAndDrop=_ref.statusDragAndDrop;var ref=useRef(null);var _useDrop=useDrop({accept:ItemTypes.CARD,collect:function collect(monitor){return{handlerId:monitor.getHandlerId()};},hover:function hover(item,monitor){var _ref$current;if(!ref.current||!statusDragAndDrop){return;}var dragIndex=findIndex(item.id,arrayContentCard);var hoverIndex=findIndex(contentCard.id,arrayContentCard);// Don't replace items with themselves\n// Don't replace items with themselves\nif(dragIndex===hoverIndex){return;}// Determine rectangle on screen\n// Determine rectangle on screen\nvar hoverBoundingRect=(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.getBoundingClientRect();// Get vertical middle\n// Get vertical middle\nvar hoverMiddleY=(hoverBoundingRect.bottom-hoverBoundingRect.top)/2;// Determine mouse position\n// Determine mouse position\nvar clientOffset=monitor.getClientOffset();// Get pixels to the top\n// Get pixels to the top\nvar hoverClientY=clientOffset.y-hoverBoundingRect.top;// Only perform the move when the mouse has crossed half of the items height\n// When dragging downwards, only move when the cursor is below 50%\n// When dragging upwards, only move when the cursor is above 50%\n// Dragging downwards\n// Only perform the move when the mouse has crossed half of the items height\n// When dragging downwards, only move when the cursor is below 50%\n// When dragging upwards, only move when the cursor is above 50%\n// Dragging downwards\nif(dragIndex<hoverIndex&&hoverClientY<hoverMiddleY){return;}// Dragging upwards\n// Dragging upwards\nif(dragIndex>hoverIndex&&hoverClientY>hoverMiddleY){return;}// Time to actually perform the action\n// Time to actually perform the action\nif(moveCard){moveCard(dragIndex,hoverIndex,arrayContentCard,setArrayContentCard);}// Note: we're mutating the monitor item here!\n// Generally it's better to avoid mutations,\n// but it's good here for the sake of performance\n// to avoid expensive index searches.\n// let dropCard = findCard(dragIndex, arrayContentCard)\n// const hoverCard = findCard(hoverIndex, arrayContentCard)\n// dropCard  = {...hoverCard}\n}}),_useDrop2=_slicedToArray(_useDrop,2),handlerId=_useDrop2[0].handlerId,drop=_useDrop2[1];var _useDrag=useDrag({type:ItemTypes.CARD,item:function item(){return{id:contentCard.id,index:findIndex(contentCard.id,arrayContentCard)};},collect:function collect(monitor){return{isDragging:monitor.isDragging()};}}),_useDrag2=_slicedToArray(_useDrag,2),isDragging=_useDrag2[0].isDragging,drag=_useDrag2[1];var opacity=isDragging?0.5:1;drag(drop(ref));return/*#__PURE__*/_jsx(Box,{className:\"layout-drag-and-drop__container\",style:{opacity:opacity},ref:ref,\"data-handler-id\":handlerId,children:children});};export default LayoutContainerDragAndDrop;","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/src/layouts/LayoutContainerDragAndDrop/LayoutContainerDragAndDrop.tsx"],"names":["React","useRef","Box","useDrag","useDrop","ItemTypes","findIndex","LayoutContainerDragAndDrop","children","contentCard","setArrayContentCard","arrayContentCard","moveCard","statusDragAndDrop","ref","accept","CARD","collect","monitor","handlerId","getHandlerId","hover","item","current","dragIndex","id","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","drop","type","index","isDragging","drag","opacity"],"mappings":"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","sourcesContent":["import React, {useRef} from \"react\";\nimport {Box} from \"@sanity/ui\";\nimport {DropTargetMonitor, useDrag, useDrop} from \"react-dnd\";\nimport {ItemTypes} from \"../../components/SingleImgComponent/itemTypes\";\nimport {Dispatch, findCard, findIndex, InterfaceContentCard} from \"../../components/ContainerMediaComponent/contentCard\";\nimport {XYCoord} from \"dnd-core\";\n\ntype LayoutContainerDragAndDropProps = {\n    contentCard: InterfaceContentCard;\n    setArrayContentCard: Dispatch<InterfaceContentCard[]>;\n    arrayContentCard: InterfaceContentCard[];\n    moveCard?: (dragIndex: number, hoverIndex: number,\n    arrayContentCard: InterfaceContentCard[], setArrayContentCard: Dispatch<InterfaceContentCard[]>) => void;\n    statusDragAndDrop: boolean;\n}\n\nconst LayoutContainerDragAndDrop: React.FunctionComponent<LayoutContainerDragAndDropProps> = ({\n      children,\n      contentCard,\n      setArrayContentCard,\n      arrayContentCard,\n      moveCard,\n      statusDragAndDrop,\n    }) => {\n    const ref = useRef<HTMLDivElement>(null)\n\n    const [{handlerId}, drop] = useDrop({\n        accept: ItemTypes.CARD,\n        collect(monitor) {\n            return {\n                handlerId: monitor.getHandlerId(),\n            }\n        },\n        hover(item: InterfaceContentCard, monitor: DropTargetMonitor) {\n            if (!ref.current || !statusDragAndDrop) {\n                return\n            }\n            const dragIndex = findIndex(item.id, arrayContentCard)\n            const hoverIndex = findIndex(contentCard.id, arrayContentCard)\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return\n            }\n            // Determine rectangle on screen\n            const hoverBoundingRect = ref.current?.getBoundingClientRect()\n            // Get vertical middle\n            const hoverMiddleY =\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset()\n            // Get pixels to the top\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n            // Dragging downwards\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return\n            }\n            // Dragging upwards\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return\n            }\n            // Time to actually perform the action\n            if (moveCard) {\n                moveCard(dragIndex, hoverIndex, arrayContentCard, setArrayContentCard)\n            }\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            // let dropCard = findCard(dragIndex, arrayContentCard)\n            // const hoverCard = findCard(hoverIndex, arrayContentCard)\n            // dropCard  = {...hoverCard}\n        },\n    })\n\n    const [{isDragging}, drag] = useDrag({\n        type: ItemTypes.CARD,\n        item: () => {\n            return {id: contentCard.id, index: findIndex(contentCard.id, arrayContentCard)}\n        },\n        collect: (monitor: any) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    })\n\n    const opacity = isDragging ? 0.5 : 1\n    drag(drop(ref))\n\n    return (\n        <Box\n            className={\"layout-drag-and-drop__container\"}\n            style={{opacity}}\n            ref={ref}\n            data-handler-id={handlerId}\n        >\n            {children}\n        </Box>\n    )\n}\n\nexport default LayoutContainerDragAndDrop"]},"metadata":{},"sourceType":"module"}