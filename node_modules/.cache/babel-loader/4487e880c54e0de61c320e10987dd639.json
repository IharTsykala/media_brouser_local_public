{"ast":null,"code":"\"use strict\";\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar fract = require('refractor/core.js');\n\nvar mapChildren = require('./mapChildren');\n\nvar addMarkers = require('./addMarkers'); // eslint-disable-next-line id-length\n\n\nvar h = React.createElement;\n\nfunction Refractor(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!fract.registered(props.language)) {\n      // eslint-disable-next-line no-console\n      console.warn(\"No language definitions for \\\"\".concat(props.language, \"\\\" seems to be registered, did you forget to call `Refractor.registerLanguage()`?\"));\n    }\n  }\n\n  var langClassName = \"language-\".concat(props.language);\n  var codeProps = {\n    className: langClassName\n  };\n  var preProps = {\n    className: [props.className, langClassName].filter(Boolean).join(' ')\n  };\n\n  if (props.inline) {\n    codeProps.style = {\n      display: 'inline'\n    };\n    codeProps.className = props.className;\n  }\n\n  var ast = fract.highlight(props.value, props.language);\n\n  if (props.markers && props.markers.length > 0) {\n    ast = addMarkers(ast, {\n      markers: props.markers\n    });\n  }\n\n  var value = ast.length === 0 ? props.value : ast.map(mapChildren.depth(0));\n  var code = h('code', codeProps, value);\n  return props.inline ? code : h('pre', preProps, code);\n}\n\nRefractor.propTypes = {\n  className: PropTypes.string,\n  inline: PropTypes.bool,\n  language: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  markers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    line: PropTypes.number.isRequired,\n    className: PropTypes.string,\n    component: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n  })]))\n};\nRefractor.defaultProps = {\n  className: 'refractor',\n  inline: false\n};\n\nRefractor.registerLanguage = function (lang) {\n  return fract.register(lang);\n};\n\nRefractor.hasLanguage = function (lang) {\n  return fract.registered(lang);\n};\n\nmodule.exports = Refractor;","map":{"version":3,"sources":["../src/Refractor.js"],"names":["React","require","PropTypes","fract","mapChildren","addMarkers","h","process","props","console","langClassName","codeProps","className","preProps","display","ast","markers","value","code","Refractor","inline","language","line","component","module"],"mappings":"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","sourcesContent":["const React = require('react')\nconst PropTypes = require('prop-types')\nconst fract = require('refractor/core.js')\nconst mapChildren = require('./mapChildren')\nconst addMarkers = require('./addMarkers')\n\n// eslint-disable-next-line id-length\nconst h = React.createElement\n\nfunction Refractor(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!fract.registered(props.language)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `No language definitions for \"${props.language}\" seems to be registered, did you forget to call \\`Refractor.registerLanguage()\\`?`\n      )\n    }\n  }\n\n  const langClassName = `language-${props.language}`\n  const codeProps = {className: langClassName}\n  const preProps = {className: [props.className, langClassName].filter(Boolean).join(' ')}\n\n  if (props.inline) {\n    codeProps.style = {display: 'inline'}\n    codeProps.className = props.className\n  }\n\n  let ast = fract.highlight(props.value, props.language)\n  if (props.markers && props.markers.length > 0) {\n    ast = addMarkers(ast, {markers: props.markers})\n  }\n\n  const value = ast.length === 0 ? props.value : ast.map(mapChildren.depth(0))\n\n  const code = h('code', codeProps, value)\n  return props.inline ? code : h('pre', preProps, code)\n}\n\nRefractor.propTypes = {\n  className: PropTypes.string,\n  inline: PropTypes.bool,\n  language: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  markers: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.shape({\n        line: PropTypes.number.isRequired,\n        className: PropTypes.string,\n        component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n      }),\n    ])\n  ),\n}\n\nRefractor.defaultProps = {\n  className: 'refractor',\n  inline: false,\n}\n\nRefractor.registerLanguage = (lang) => fract.register(lang)\nRefractor.hasLanguage = (lang) => fract.registered(lang)\n\nmodule.exports = Refractor\n"]},"metadata":{},"sourceType":"script"}