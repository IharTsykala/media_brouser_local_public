{"ast":null,"code":"'use strict';\n\nvar convert = require('unist-util-is/convert');\n\nmodule.exports = filter;\nvar own = {}.hasOwnProperty;\n\nfunction filter(tree, options, test) {\n  var is = convert(test || options);\n  var cascade = options.cascade == null ? true : options.cascade;\n  return preorder(tree, null, null);\n\n  function preorder(node, index, parent) {\n    var children;\n    var childIndex;\n    var result;\n    var next;\n    var key;\n    if (!is(node, index, parent)) return null;\n\n    if (node.children) {\n      children = [];\n      childIndex = -1;\n\n      while (++childIndex < node.children.length) {\n        result = preorder(node.children[childIndex], childIndex, node);\n\n        if (result) {\n          children.push(result);\n        }\n      }\n\n      if (cascade && node.children.length && !children.length) return null;\n    } // Create a shallow clone, using the new children.\n\n\n    next = {};\n\n    for (key in node) {\n      /* istanbul ignore else - Prototype injection. */\n      if (own.call(node, key)) {\n        next[key] = key === 'children' ? children : node[key];\n      }\n    }\n\n    return next;\n  }\n}","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/node_modules/unist-util-filter/index.js"],"names":["convert","require","module","exports","filter","own","hasOwnProperty","tree","options","test","is","cascade","preorder","node","index","parent","children","childIndex","result","next","key","length","push","call"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AAEA,IAAIC,GAAG,GAAG,GAAGC,cAAb;;AAEA,SAASF,MAAT,CAAgBG,IAAhB,EAAsBC,OAAtB,EAA+BC,IAA/B,EAAqC;AACnC,MAAIC,EAAE,GAAGV,OAAO,CAACS,IAAI,IAAID,OAAT,CAAhB;AACA,MAAIG,OAAO,GAAGH,OAAO,CAACG,OAAR,IAAmB,IAAnB,GAA0B,IAA1B,GAAiCH,OAAO,CAACG,OAAvD;AAEA,SAAOC,QAAQ,CAACL,IAAD,EAAO,IAAP,EAAa,IAAb,CAAf;;AAEA,WAASK,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,QAAIC,QAAJ;AACA,QAAIC,UAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,GAAJ;AAEA,QAAI,CAACV,EAAE,CAACG,IAAD,EAAOC,KAAP,EAAcC,MAAd,CAAP,EAA8B,OAAO,IAAP;;AAE9B,QAAIF,IAAI,CAACG,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAG,EAAX;AACAC,MAAAA,UAAU,GAAG,CAAC,CAAd;;AAEA,aAAO,EAAEA,UAAF,GAAeJ,IAAI,CAACG,QAAL,CAAcK,MAApC,EAA4C;AAC1CH,QAAAA,MAAM,GAAGN,QAAQ,CAACC,IAAI,CAACG,QAAL,CAAcC,UAAd,CAAD,EAA4BA,UAA5B,EAAwCJ,IAAxC,CAAjB;;AAEA,YAAIK,MAAJ,EAAY;AACVF,UAAAA,QAAQ,CAACM,IAAT,CAAcJ,MAAd;AACD;AACF;;AAED,UAAIP,OAAO,IAAIE,IAAI,CAACG,QAAL,CAAcK,MAAzB,IAAmC,CAACL,QAAQ,CAACK,MAAjD,EAAyD,OAAO,IAAP;AAC1D,KAtBoC,CAwBrC;;;AACAF,IAAAA,IAAI,GAAG,EAAP;;AAEA,SAAKC,GAAL,IAAYP,IAAZ,EAAkB;AAChB;AACA,UAAIR,GAAG,CAACkB,IAAJ,CAASV,IAAT,EAAeO,GAAf,CAAJ,EAAyB;AACvBD,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYA,GAAG,KAAK,UAAR,GAAqBJ,QAArB,GAAgCH,IAAI,CAACO,GAAD,CAAhD;AACD;AACF;;AAED,WAAOD,IAAP;AACD;AACF","sourcesContent":["'use strict'\n\nvar convert = require('unist-util-is/convert')\n\nmodule.exports = filter\n\nvar own = {}.hasOwnProperty\n\nfunction filter(tree, options, test) {\n  var is = convert(test || options)\n  var cascade = options.cascade == null ? true : options.cascade\n\n  return preorder(tree, null, null)\n\n  function preorder(node, index, parent) {\n    var children\n    var childIndex\n    var result\n    var next\n    var key\n\n    if (!is(node, index, parent)) return null\n\n    if (node.children) {\n      children = []\n      childIndex = -1\n\n      while (++childIndex < node.children.length) {\n        result = preorder(node.children[childIndex], childIndex, node)\n\n        if (result) {\n          children.push(result)\n        }\n      }\n\n      if (cascade && node.children.length && !children.length) return null\n    }\n\n    // Create a shallow clone, using the new children.\n    next = {}\n\n    for (key in node) {\n      /* istanbul ignore else - Prototype injection. */\n      if (own.call(node, key)) {\n        next[key] = key === 'children' ? children : node[key]\n      }\n    }\n\n    return next\n  }\n}\n"]},"metadata":{},"sourceType":"script"}