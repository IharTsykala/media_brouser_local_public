{"ast":null,"code":"const getContentCards = imgArr => imgArr.map(src => new ContentCard(id++, \"some name\", src, \"some description\", false, \"image/png\", \"1280 * 720 px\", \"128 kb\"));\n\nexport default getContentCards;\nexport const findIndex = (id, arrayContentCard) => arrayContentCard.findIndex(contentCard => contentCard.id === id);\nexport const findCard = (id, arrayContentCard) => arrayContentCard.find(card => card.id === id);\nexport const getArrayBlobObjects = arrayFiles => arrayFiles.map(file => URL.createObjectURL(file));\nexport const onUploadClick = inputElement => inputElement.current.click();\nexport const handlerUploadDocument = (e, setArrayContentCard, typeArrayContentCard) => {\n  var _e$target, _e$target$files;\n\n  const arrayFiles = (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$files = _e$target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0]) ? typeArrayContentCard === \"single\" ? [e.target.files[0]] : Array.from(e.target.files) : [];\n  const files = getArrayBlobObjects(arrayFiles);\n  setArrayContentCard(getContentCards(files));\n};\nexport const setValueCheckBox = (idCard, arrayContentCard, setArrayContentCard, statusHeaderForList, statusCommonCheckBox) => setArrayContentCard(arrayContentCard.map(contentCard => statusHeaderForList ? { ...contentCard,\n  checkbox: !statusCommonCheckBox\n} : contentCard.id === idCard ? { ...contentCard,\n  checkbox: !contentCard.checkbox\n} : contentCard));\nexport const removeImgFromGallery = (arrayContentCard, setArrayContentCard, id) => setArrayContentCard(arrayContentCard.filter(contentCard => id === \"checkBox\" ? !contentCard.checkbox : contentCard.id !== id));\nexport const handlerOnClickCheckBox = (statusHeaderForList, setStatusCommonCheckBox, statusCommonCheckBox, idCard, arrayContentCard, setArrayContentCard) => {\n  if (statusHeaderForList) {\n    setStatusCommonCheckBox(!statusCommonCheckBox);\n  }\n\n  setValueCheckBox(idCard, arrayContentCard, setArrayContentCard, statusHeaderForList, statusCommonCheckBox);\n};\nexport const handlerSetStatusDragAndDrop = (e, value, setStatusDragAndDrop) => {\n  e.stopPropagation();\n\n  if (setStatusDragAndDrop) {\n    setStatusDragAndDrop(value);\n  }\n};","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/src/components/ContainerMediaComponent/contentCard.ts"],"names":["getContentCards","imgArr","map","src","ContentCard","id","findIndex","arrayContentCard","contentCard","findCard","find","card","getArrayBlobObjects","arrayFiles","file","URL","createObjectURL","onUploadClick","inputElement","current","click","handlerUploadDocument","e","setArrayContentCard","typeArrayContentCard","target","files","Array","from","setValueCheckBox","idCard","statusHeaderForList","statusCommonCheckBox","checkbox","removeImgFromGallery","filter","handlerOnClickCheckBox","setStatusCommonCheckBox","handlerSetStatusDragAndDrop","value","setStatusDragAndDrop","stopPropagation"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n\n\nconst getContentCards = (imgArr: string[]) =>\n    imgArr.map((src: string) => new ContentCard(id++, \"some name\", src, \"some description\",\n        false, \"image/png\", \"1280 * 720 px\", \"128 kb\"))\n\nexport default getContentCards\n\nexport type Dispatch<A> = (value: A) => void;\n\nexport type  OnDrop = (inputTarget: any[], setArrayContentCard: Dispatch<InterfaceContentCard[]>) => void\n\nexport const findIndex = (id: string | number, arrayContentCard: InterfaceContentCard[]) =>\n    arrayContentCard.findIndex(contentCard=>contentCard.id === id)\n\nexport const findCard = (id: string | number, arrayContentCard: InterfaceContentCard[]) =>\n    arrayContentCard.find((card: InterfaceContentCard)=> card.id === id)\n\nexport const getArrayBlobObjects = (arrayFiles:  File[]) => arrayFiles.map((file: {}) => URL.createObjectURL(file))\n\nexport const onUploadClick = (inputElement: React.MutableRefObject<HTMLInputElement>) => inputElement.current.click()\n\nexport const handlerUploadDocument = (e: React.ChangeEvent<HTMLInputElement>,\n        setArrayContentCard: Dispatch<InterfaceContentCard[]>, typeArrayContentCard?: string) => {\n\n    const arrayFiles = e?.target?.files?.[0]\n        ? typeArrayContentCard === \"single\"\n            ? [e.target.files[0]]\n            : Array.from(e.target.files)\n        : []\n    const files = getArrayBlobObjects(arrayFiles)\n    setArrayContentCard(getContentCards(files))\n}\n\nexport const setValueCheckBox = (idCard: number | string, arrayContentCard: InterfaceContentCard[],\n    setArrayContentCard: Dispatch<InterfaceContentCard[]>, statusHeaderForList: boolean, statusCommonCheckBox: boolean) =>\n        setArrayContentCard(arrayContentCard.map((contentCard: InterfaceContentCard) =>\n            statusHeaderForList? {...contentCard, checkbox: !statusCommonCheckBox}\n                :contentCard.id === idCard\n                ? {...contentCard, checkbox: !contentCard.checkbox}\n            :contentCard\n        ))\n\nexport const removeImgFromGallery = (arrayContentCard: InterfaceContentCard[],\n             setArrayContentCard: Dispatch<InterfaceContentCard[]>, id: string | number | null) =>\n                 setArrayContentCard(arrayContentCard.filter(contentCard => id === \"checkBox\"\n                     ? !contentCard.checkbox: contentCard.id !== id))\n\nexport const handlerOnClickCheckBox = (statusHeaderForList: boolean, setStatusCommonCheckBox: Dispatch<boolean>,\n    statusCommonCheckBox: boolean, idCard: number | string, arrayContentCard: InterfaceContentCard[],\n        setArrayContentCard: Dispatch<InterfaceContentCard[]>) => {\n    if (statusHeaderForList) {\n        setStatusCommonCheckBox(!statusCommonCheckBox)\n    }\n    setValueCheckBox(idCard, arrayContentCard, setArrayContentCard, statusHeaderForList, statusCommonCheckBox)\n}\n\nexport const handlerSetStatusDragAndDrop = (e: React.MouseEvent<HTMLImageElement | HTMLDivElement>, value: boolean,\n      setStatusDragAndDrop: Dispatch<boolean>) => {\n    e.stopPropagation()\n    if (setStatusDragAndDrop) {\n        setStatusDragAndDrop(value)\n    }\n}"]},"metadata":{},"sourceType":"module"}