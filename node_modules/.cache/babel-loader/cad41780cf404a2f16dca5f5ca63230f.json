{"ast":null,"code":"import { put, takeEvery } from \"redux-saga/effects\";\nimport { ActionTypes, getFailureAction, setArrayVideo } from \"./video.actions\";\nimport videoService from \"../../../services/api/videoService\";\n\nfunction* getAuthVideoSaga(action) {\n  try {\n    const response = yield videoService.getNewAccessTokenService;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* getArrayVideoSaga() {\n  try {\n    // const accessToken = yield videoService.getRedirectToAllowPageService()\n    const response = yield videoService.getArrayVideoService();\n    yield put(setArrayVideo(response.data)); // console.log(\"getArray\", response)\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nfunction* removeCardByIdSaga(action) {\n  try {// const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.removeCardByIdService(action.payload, responseAccessToken.access_token)\n    // console.log(\"remove\",response)\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nfunction* editCardByIdSaga(action) {\n  try {// const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.editCardByIdService(action.payload, responseAccessToken.access_token)\n    // console.log(\"edit\",response)\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nexport default function* videoSaga() {\n  yield takeEvery(ActionTypes.GET_AUTH_VIDEO, getAuthVideoSaga);\n  yield takeEvery(ActionTypes.GET_ARRAY_VIDEO, getArrayVideoSaga);\n  yield takeEvery(ActionTypes.REMOVE_CARD_BY_ID, removeCardByIdSaga);\n  yield takeEvery(ActionTypes.EDIT_CARD_BY_ID, editCardByIdSaga);\n}","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/src/Redux/store/video/video.saga.ts"],"names":["put","takeEvery","ActionTypes","getFailureAction","setArrayVideo","videoService","getAuthVideoSaga","action","response","getNewAccessTokenService","e","console","log","getArrayVideoSaga","getArrayVideoService","data","removeCardByIdSaga","editCardByIdSaga","videoSaga","GET_AUTH_VIDEO","GET_ARRAY_VIDEO","REMOVE_CARD_BY_ID","EDIT_CARD_BY_ID"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AACA,SAASC,WAAT,EAAoCC,gBAApC,EAAsDC,aAAtD,QAA2E,iBAA3E;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,UAAUC,gBAAV,CAA2BC,MAA3B,EAAwC;AACtC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMH,YAAY,CAACI,wBAApC;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;;AAED,UAAUG,iBAAV,GAA8B;AAC5B,MAAI;AACF;AACA,UAAML,QAAQ,GAAG,MAAMH,YAAY,CAACS,oBAAb,EAAvB;AACA,UAAMd,GAAG,CAACI,aAAa,CAACI,QAAQ,CAACO,IAAV,CAAd,CAAT,CAHE,CAIF;AACD,GALD,CAKE,OAAOL,CAAP,EAAU;AACV,UAAMV,GAAG,CAACG,gBAAgB,CAACO,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,UAAUM,kBAAV,CAA6BT,MAA7B,EAA0C;AACxC,MAAI,CACF;AACA;AAEA;AACD,GALD,CAKE,OAAOG,CAAP,EAAU;AACV,UAAMV,GAAG,CAACG,gBAAgB,CAACO,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,UAAUO,gBAAV,CAA2BV,MAA3B,EAAwC;AACtC,MAAI,CACF;AACA;AAEA;AACD,GALD,CAKE,OAAOG,CAAP,EAAU;AACV,UAAMV,GAAG,CAACG,gBAAgB,CAACO,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,eAAe,UAAUQ,SAAV,GAAsB;AACnC,QAAMjB,SAAS,CAACC,WAAW,CAACiB,cAAb,EAA6Bb,gBAA7B,CAAf;AACA,QAAML,SAAS,CAACC,WAAW,CAACkB,eAAb,EAA8BP,iBAA9B,CAAf;AACA,QAAMZ,SAAS,CAACC,WAAW,CAACmB,iBAAb,EAAgCL,kBAAhC,CAAf;AACA,QAAMf,SAAS,CAACC,WAAW,CAACoB,eAAb,EAA8BL,gBAA9B,CAAf;AACD","sourcesContent":["import { put, takeEvery } from \"redux-saga/effects\"\nimport { ActionTypes, getAuthVideo, getFailureAction, setArrayVideo } from \"./video.actions\"\nimport videoService from \"../../../services/api/videoService\";\n\nfunction* getAuthVideoSaga(action: any) {\n  try {\n    const response = yield videoService.getNewAccessTokenService\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nfunction* getArrayVideoSaga() {\n  try {\n    // const accessToken = yield videoService.getRedirectToAllowPageService()\n    const response = yield videoService.getArrayVideoService()\n    yield put(setArrayVideo(response.data))\n    // console.log(\"getArray\", response)\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nfunction* removeCardByIdSaga(action: any) {\n  try {\n    // const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.removeCardByIdService(action.payload, responseAccessToken.access_token)\n\n    // console.log(\"remove\",response)\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nfunction* editCardByIdSaga(action: any) {\n  try {\n    // const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.editCardByIdService(action.payload, responseAccessToken.access_token)\n\n    // console.log(\"edit\",response)\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nexport default function* videoSaga() {\n  yield takeEvery(ActionTypes.GET_AUTH_VIDEO, getAuthVideoSaga)\n  yield takeEvery(ActionTypes.GET_ARRAY_VIDEO, getArrayVideoSaga)\n  yield takeEvery(ActionTypes.REMOVE_CARD_BY_ID, removeCardByIdSaga)\n  yield takeEvery(ActionTypes.EDIT_CARD_BY_ID, editCardByIdSaga)\n}\n"]},"metadata":{},"sourceType":"module"}