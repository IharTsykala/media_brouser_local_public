{"ast":null,"code":"import { put, takeEvery } from \"redux-saga/effects\";\nimport { ActionTypes, getFailureAction, setArrayVideo } from \"./video.actions\";\nimport videoService from \"../../../services/api/videoService\";\nconst stateWord = \"helloUser\";\n\nfunction* getAuthVideoSaga(action) {\n  try {\n    if (action.payload.state !== stateWord) {\n      return;\n    }\n\n    const response = yield videoService.getNewAccessTokenService(action.payload.code);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* getArrayVideoSaga() {\n  try {\n    const response = yield videoService.getArrayVideoService();\n    yield put(setArrayVideo(response));\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nfunction* removeCardByIdSaga(action) {\n  try {\n    const response = yield videoService.removeCardByIdService(action.payload); // console.log(\"remove\",response)\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nfunction* editCardByIdSaga(action) {\n  try {// const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.editCardByIdService(action.payload, responseAccessToken.access_token)\n    // console.log(\"edit\",response)\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nexport default function* videoSaga() {\n  yield takeEvery(ActionTypes.GET_AUTH_VIDEO, getAuthVideoSaga);\n  yield takeEvery(ActionTypes.GET_ARRAY_VIDEO, getArrayVideoSaga);\n  yield takeEvery(ActionTypes.REMOVE_CARD_BY_ID, removeCardByIdSaga);\n  yield takeEvery(ActionTypes.EDIT_CARD_BY_ID, editCardByIdSaga);\n}","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/src/Redux/store/video/video.saga.ts"],"names":["put","takeEvery","ActionTypes","getFailureAction","setArrayVideo","videoService","stateWord","getAuthVideoSaga","action","payload","state","response","getNewAccessTokenService","code","e","console","log","getArrayVideoSaga","getArrayVideoService","removeCardByIdSaga","removeCardByIdService","editCardByIdSaga","videoSaga","GET_AUTH_VIDEO","GET_ARRAY_VIDEO","REMOVE_CARD_BY_ID","EDIT_CARD_BY_ID"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AACA,SAASC,WAAT,EAAoCC,gBAApC,EAAsDC,aAAtD,QAA2E,iBAA3E;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,MAAMC,SAAS,GAAG,WAAlB;;AAEA,UAAUC,gBAAV,CAA2BC,MAA3B,EAAwC;AACtC,MAAI;AACF,QAAGA,MAAM,CAACC,OAAP,CAAeC,KAAf,KAAyBJ,SAA5B,EAAuC;AACrC;AACD;;AACD,UAAMK,QAAQ,GAAG,MAAMN,YAAY,CAACO,wBAAb,CAAsCJ,MAAM,CAACC,OAAP,CAAeI,IAArD,CAAvB;AACD,GALD,CAKE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;;AAED,UAAUG,iBAAV,GAA8B;AAC5B,MAAI;AACF,UAAMN,QAAQ,GAAG,MAAMN,YAAY,CAACa,oBAAb,EAAvB;AACA,UAAMlB,GAAG,CAACI,aAAa,CAACO,QAAD,CAAd,CAAT;AACD,GAHD,CAGE,OAAOG,CAAP,EAAU;AACV,UAAMd,GAAG,CAACG,gBAAgB,CAACW,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,UAAUK,kBAAV,CAA6BX,MAA7B,EAA0C;AACxC,MAAI;AACF,UAAMG,QAAQ,GAAG,MAAMN,YAAY,CAACe,qBAAb,CAAmCZ,MAAM,CAACC,OAA1C,CAAvB,CADE,CAGF;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACV,UAAMd,GAAG,CAACG,gBAAgB,CAACW,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,UAAUO,gBAAV,CAA2Bb,MAA3B,EAAwC;AACtC,MAAI,CACF;AACA;AAEA;AACD,GALD,CAKE,OAAOM,CAAP,EAAU;AACV,UAAMd,GAAG,CAACG,gBAAgB,CAACW,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,eAAe,UAAUQ,SAAV,GAAsB;AACnC,QAAMrB,SAAS,CAACC,WAAW,CAACqB,cAAb,EAA6BhB,gBAA7B,CAAf;AACA,QAAMN,SAAS,CAACC,WAAW,CAACsB,eAAb,EAA8BP,iBAA9B,CAAf;AACA,QAAMhB,SAAS,CAACC,WAAW,CAACuB,iBAAb,EAAgCN,kBAAhC,CAAf;AACA,QAAMlB,SAAS,CAACC,WAAW,CAACwB,eAAb,EAA8BL,gBAA9B,CAAf;AACD","sourcesContent":["import { put, takeEvery } from \"redux-saga/effects\"\nimport { ActionTypes, getAuthVideo, getFailureAction, setArrayVideo } from \"./video.actions\"\nimport videoService from \"../../../services/api/videoService\";\nconst stateWord = \"helloUser\"\n\nfunction* getAuthVideoSaga(action: any) {\n  try {\n    if(action.payload.state !== stateWord) {\n      return\n    }\n    const response = yield videoService.getNewAccessTokenService(action.payload.code)\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nfunction* getArrayVideoSaga() {\n  try {\n    const response = yield videoService.getArrayVideoService()\n    yield put(setArrayVideo(response))\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nfunction* removeCardByIdSaga(action: any) {\n  try {\n    const response = yield videoService.removeCardByIdService(action.payload)\n\n    // console.log(\"remove\",response)\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nfunction* editCardByIdSaga(action: any) {\n  try {\n    // const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.editCardByIdService(action.payload, responseAccessToken.access_token)\n\n    // console.log(\"edit\",response)\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nexport default function* videoSaga() {\n  yield takeEvery(ActionTypes.GET_AUTH_VIDEO, getAuthVideoSaga)\n  yield takeEvery(ActionTypes.GET_ARRAY_VIDEO, getArrayVideoSaga)\n  yield takeEvery(ActionTypes.REMOVE_CARD_BY_ID, removeCardByIdSaga)\n  yield takeEvery(ActionTypes.EDIT_CARD_BY_ID, editCardByIdSaga)\n}\n"]},"metadata":{},"sourceType":"module"}