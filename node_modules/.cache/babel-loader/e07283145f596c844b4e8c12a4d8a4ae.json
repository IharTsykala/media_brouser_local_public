{"ast":null,"code":"import { put, takeEvery } from \"redux-saga/effects\";\nimport { ActionTypes, getFailureAction, setArrayVideo } from \"./video.actions\";\nimport videoService from \"../../../services/api/videoService\";\nconst stateWord = \"helloUser\";\n\nfunction* getAuthVideoSaga(action) {\n  try {\n    if (action.state !== stateWord) {\n      return;\n    }\n\n    const response = yield videoService.getNewAccessTokenService(action.code);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* getArrayVideoSaga() {\n  try {\n    // const accessToken = yield videoService.getRedirectToAllowPageService()\n    const response = yield videoService.getArrayVideoService();\n    yield put(setArrayVideo(response.data)); // console.log(\"getArray\", response)\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nfunction* removeCardByIdSaga(action) {\n  try {// const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.removeCardByIdService(action.payload, responseAccessToken.access_token)\n    // console.log(\"remove\",response)\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nfunction* editCardByIdSaga(action) {\n  try {// const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.editCardByIdService(action.payload, responseAccessToken.access_token)\n    // console.log(\"edit\",response)\n  } catch (e) {\n    yield put(getFailureAction(e));\n  }\n}\n\nexport default function* videoSaga() {\n  yield takeEvery(ActionTypes.GET_AUTH_VIDEO, getAuthVideoSaga);\n  yield takeEvery(ActionTypes.GET_ARRAY_VIDEO, getArrayVideoSaga);\n  yield takeEvery(ActionTypes.REMOVE_CARD_BY_ID, removeCardByIdSaga);\n  yield takeEvery(ActionTypes.EDIT_CARD_BY_ID, editCardByIdSaga);\n}","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/src/Redux/store/video/video.saga.ts"],"names":["put","takeEvery","ActionTypes","getFailureAction","setArrayVideo","videoService","stateWord","getAuthVideoSaga","action","state","response","getNewAccessTokenService","code","e","console","log","getArrayVideoSaga","getArrayVideoService","data","removeCardByIdSaga","editCardByIdSaga","videoSaga","GET_AUTH_VIDEO","GET_ARRAY_VIDEO","REMOVE_CARD_BY_ID","EDIT_CARD_BY_ID"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AACA,SAASC,WAAT,EAAoCC,gBAApC,EAAsDC,aAAtD,QAA2E,iBAA3E;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,MAAMC,SAAS,GAAG,WAAlB;;AAEA,UAAUC,gBAAV,CAA2BC,MAA3B,EAAwC;AACtC,MAAI;AACF,QAAGA,MAAM,CAACC,KAAP,KAAiBH,SAApB,EAA+B;AAC7B;AACD;;AACD,UAAMI,QAAQ,GAAG,MAAML,YAAY,CAACM,wBAAb,CAAsCH,MAAM,CAACI,IAA7C,CAAvB;AACD,GALD,CAKE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;;AAED,UAAUG,iBAAV,GAA8B;AAC5B,MAAI;AACF;AACA,UAAMN,QAAQ,GAAG,MAAML,YAAY,CAACY,oBAAb,EAAvB;AACA,UAAMjB,GAAG,CAACI,aAAa,CAACM,QAAQ,CAACQ,IAAV,CAAd,CAAT,CAHE,CAIF;AACD,GALD,CAKE,OAAOL,CAAP,EAAU;AACV,UAAMb,GAAG,CAACG,gBAAgB,CAACU,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,UAAUM,kBAAV,CAA6BX,MAA7B,EAA0C;AACxC,MAAI,CACF;AACA;AAEA;AACD,GALD,CAKE,OAAOK,CAAP,EAAU;AACV,UAAMb,GAAG,CAACG,gBAAgB,CAACU,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,UAAUO,gBAAV,CAA2BZ,MAA3B,EAAwC;AACtC,MAAI,CACF;AACA;AAEA;AACD,GALD,CAKE,OAAOK,CAAP,EAAU;AACV,UAAMb,GAAG,CAACG,gBAAgB,CAACU,CAAD,CAAjB,CAAT;AACD;AACF;;AAED,eAAe,UAAUQ,SAAV,GAAsB;AACnC,QAAMpB,SAAS,CAACC,WAAW,CAACoB,cAAb,EAA6Bf,gBAA7B,CAAf;AACA,QAAMN,SAAS,CAACC,WAAW,CAACqB,eAAb,EAA8BP,iBAA9B,CAAf;AACA,QAAMf,SAAS,CAACC,WAAW,CAACsB,iBAAb,EAAgCL,kBAAhC,CAAf;AACA,QAAMlB,SAAS,CAACC,WAAW,CAACuB,eAAb,EAA8BL,gBAA9B,CAAf;AACD","sourcesContent":["import { put, takeEvery } from \"redux-saga/effects\"\nimport { ActionTypes, getAuthVideo, getFailureAction, setArrayVideo } from \"./video.actions\"\nimport videoService from \"../../../services/api/videoService\";\nconst stateWord = \"helloUser\"\n\nfunction* getAuthVideoSaga(action: any) {\n  try {\n    if(action.state !== stateWord) {\n      return\n    }\n    const response = yield videoService.getNewAccessTokenService(action.code)\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nfunction* getArrayVideoSaga() {\n  try {\n    // const accessToken = yield videoService.getRedirectToAllowPageService()\n    const response = yield videoService.getArrayVideoService()\n    yield put(setArrayVideo(response.data))\n    // console.log(\"getArray\", response)\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nfunction* removeCardByIdSaga(action: any) {\n  try {\n    // const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.removeCardByIdService(action.payload, responseAccessToken.access_token)\n\n    // console.log(\"remove\",response)\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nfunction* editCardByIdSaga(action: any) {\n  try {\n    // const responseAccessToken = yield videoService.getNewAccessTokenService(action.payload)\n    // const response = yield videoService.editCardByIdService(action.payload, responseAccessToken.access_token)\n\n    // console.log(\"edit\",response)\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nexport default function* videoSaga() {\n  yield takeEvery(ActionTypes.GET_AUTH_VIDEO, getAuthVideoSaga)\n  yield takeEvery(ActionTypes.GET_ARRAY_VIDEO, getArrayVideoSaga)\n  yield takeEvery(ActionTypes.REMOVE_CARD_BY_ID, removeCardByIdSaga)\n  yield takeEvery(ActionTypes.EDIT_CARD_BY_ID, editCardByIdSaga)\n}\n"]},"metadata":{},"sourceType":"module"}