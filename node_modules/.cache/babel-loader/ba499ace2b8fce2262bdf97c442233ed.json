{"ast":null,"code":"import { getResponsiveProp, rem, responsive } from \"../helpers\";\n\nfunction responsiveFont(fontKey, props) {\n  const {\n    $size,\n    $weight,\n    theme\n  } = props;\n  const {\n    fonts,\n    media\n  } = theme.sanity;\n  const {\n    family,\n    sizes,\n    weights,\n    horizontalOffset\n  } = fonts[fontKey];\n  const fontWeight = $weight && weights[$weight] || weights.regular;\n  const defaultSize = sizes[2];\n  const base = {\n    position: \"relative\",\n    fontFamily: family,\n    fontWeight,\n    padding: \"1px\",\n    margin: 0,\n    \"&:before\": {\n      content: '\"\"',\n      display: \"block\",\n      height: 0\n    },\n    \"&:after\": {\n      content: '\"\"',\n      display: \"block\",\n      height: 0\n    },\n    \"& > code, & > span\": {\n      display: \"block\"\n    },\n    \"&:not([hidden])\": {\n      display: \"block\"\n    }\n  };\n  const resp = responsive(media, getResponsiveProp($size), sizeIndex => fontSize(sizes[sizeIndex] || defaultSize, horizontalOffset));\n  return [base, ...resp];\n}\n\nfunction fontSize(size, horizontalOffset) {\n  const {\n    ascenderHeight,\n    descenderHeight,\n    fontSize: fontSize2,\n    iconSize,\n    letterSpacing,\n    lineHeight\n  } = size;\n  const negHeight = ascenderHeight + descenderHeight;\n  const capHeight = lineHeight - negHeight;\n  const iconOffset = (capHeight - iconSize) / 2;\n  return {\n    fontSize: rem(fontSize2),\n    lineHeight: `calc(${lineHeight} / ${fontSize2})`,\n    letterSpacing: rem(letterSpacing),\n    transform: `translateY(${rem(descenderHeight)})`,\n    \"&:before\": {\n      marginTop: `calc(${rem(0 - negHeight)} - 1px)`\n    },\n    \"&:after\": {\n      marginBottom: \"-1px\"\n    },\n    \"& > code, & > span\": {\n      margin: horizontalOffset ? `0 calc(${rem(0 - horizontalOffset * fontSize2)} - 1px)` : \"0 -1px\"\n    },\n    \"& [data-sanity-icon]\": {\n      fontSize: `calc(${iconSize} / 16 * 1rem)`,\n      margin: [rem(iconOffset), horizontalOffset ? `calc(${rem(iconOffset)} + ${rem(horizontalOffset * fontSize2)})` : rem(iconOffset)].join(\" \")\n    }\n  };\n}\n\nexport { fontSize, responsiveFont };","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/node_modules/@sanity/ui/lib/esm/styles/font/responsiveFont.js"],"names":["getResponsiveProp","rem","responsive","responsiveFont","fontKey","props","$size","$weight","theme","fonts","media","sanity","family","sizes","weights","horizontalOffset","fontWeight","regular","defaultSize","base","position","fontFamily","padding","margin","content","display","height","resp","sizeIndex","fontSize","size","ascenderHeight","descenderHeight","fontSize2","iconSize","letterSpacing","lineHeight","negHeight","capHeight","iconOffset","transform","marginTop","marginBottom","join"],"mappings":"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","sourcesContent":["import { getResponsiveProp, rem, responsive } from \"../helpers\";\nfunction responsiveFont(fontKey, props) {\n  const { $size, $weight, theme } = props;\n  const { fonts, media } = theme.sanity;\n  const { family, sizes, weights, horizontalOffset } = fonts[fontKey];\n  const fontWeight = $weight && weights[$weight] || weights.regular;\n  const defaultSize = sizes[2];\n  const base = {\n    position: \"relative\",\n    fontFamily: family,\n    fontWeight,\n    padding: \"1px\",\n    margin: 0,\n    \"&:before\": {\n      content: '\"\"',\n      display: \"block\",\n      height: 0\n    },\n    \"&:after\": {\n      content: '\"\"',\n      display: \"block\",\n      height: 0\n    },\n    \"& > code, & > span\": {\n      display: \"block\"\n    },\n    \"&:not([hidden])\": {\n      display: \"block\"\n    }\n  };\n  const resp = responsive(media, getResponsiveProp($size), (sizeIndex) => fontSize(sizes[sizeIndex] || defaultSize, horizontalOffset));\n  return [base, ...resp];\n}\nfunction fontSize(size, horizontalOffset) {\n  const { ascenderHeight, descenderHeight, fontSize: fontSize2, iconSize, letterSpacing, lineHeight } = size;\n  const negHeight = ascenderHeight + descenderHeight;\n  const capHeight = lineHeight - negHeight;\n  const iconOffset = (capHeight - iconSize) / 2;\n  return {\n    fontSize: rem(fontSize2),\n    lineHeight: `calc(${lineHeight} / ${fontSize2})`,\n    letterSpacing: rem(letterSpacing),\n    transform: `translateY(${rem(descenderHeight)})`,\n    \"&:before\": {\n      marginTop: `calc(${rem(0 - negHeight)} - 1px)`\n    },\n    \"&:after\": {\n      marginBottom: \"-1px\"\n    },\n    \"& > code, & > span\": {\n      margin: horizontalOffset ? `0 calc(${rem(0 - horizontalOffset * fontSize2)} - 1px)` : \"0 -1px\"\n    },\n    \"& [data-sanity-icon]\": {\n      fontSize: `calc(${iconSize} / 16 * 1rem)`,\n      margin: [\n        rem(iconOffset),\n        horizontalOffset ? `calc(${rem(iconOffset)} + ${rem(horizontalOffset * fontSize2)})` : rem(iconOffset)\n      ].join(\" \")\n    }\n  };\n}\nexport {\n  fontSize,\n  responsiveFont\n};\n"]},"metadata":{},"sourceType":"module"}