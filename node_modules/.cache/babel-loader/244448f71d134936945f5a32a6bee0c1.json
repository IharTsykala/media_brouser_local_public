{"ast":null,"code":"var _jsxFileName = \"/home/ihartsykala/projects/playy/media_brouser_local_public/src/layouts/LayoutContainerUpload/LayoutContainerUpload.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Box } from \"@sanity/ui\";\nimport { useDrop } from \"react-dnd\";\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LayoutContainerUpload = ({\n  children,\n  onDrop,\n  setArrayContentCard,\n  typeArrayContentCard\n}) => {\n  _s();\n\n  const [{\n    canDrop,\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: [NativeTypes.FILE],\n\n    drop(inputTarget) {\n      if (onDrop) {\n        const inputTargetFiles = typeArrayContentCard === \"single\" ? [inputTarget.files[0]] : inputTarget.files;\n        onDrop(inputTargetFiles, setArrayContentCard);\n      }\n    },\n\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }));\n  const isActive = canDrop && isOver;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"layout-upload-box__container\",\n    style: {\n      border: `1px ${isActive ? \"green\" : \"white\"} dotted`\n    },\n    ref: drop,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LayoutContainerUpload, \"F504N0wuFSbvI1XEbEwXUidFCiM=\", false, function () {\n  return [useDrop];\n});\n\n_c = LayoutContainerUpload;\nexport default LayoutContainerUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutContainerUpload\");","map":{"version":3,"sources":["/home/ihartsykala/projects/playy/media_brouser_local_public/src/layouts/LayoutContainerUpload/LayoutContainerUpload.tsx"],"names":["React","Box","useDrop","NativeTypes","LayoutContainerUpload","children","onDrop","setArrayContentCard","typeArrayContentCard","canDrop","isOver","drop","accept","FILE","inputTarget","inputTargetFiles","files","collect","monitor","isActive","border"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAA2BC,OAA3B,QAAyC,WAAzC;AACA,SAASC,WAAT,QAA4B,yBAA5B;;;AASA,MAAMC,qBAA0E,GAAG,CAAC;AACjFC,EAAAA,QADiF;AAEjFC,EAAAA,MAFiF;AAGjFC,EAAAA,mBAHiF;AAIjFC,EAAAA;AAJiF,CAAD,KAK1E;AAAA;;AACL,QAAM,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAAsBC,IAAtB,IAA8BT,OAAO,CACvC,OAAO;AACHU,IAAAA,MAAM,EAAE,CAACT,WAAW,CAACU,IAAb,CADL;;AAEHF,IAAAA,IAAI,CAACG,WAAD,EAAgC;AAChC,UAAIR,MAAJ,EAAY;AACR,cAAMS,gBAAgB,GAAGP,oBAAoB,KAAK,QAAzB,GACnB,CAACM,WAAW,CAACE,KAAZ,CAAkB,CAAlB,CAAD,CADmB,GAEnBF,WAAW,CAACE,KAFlB;AAGAV,QAAAA,MAAM,CAACS,gBAAD,EAAmBR,mBAAnB,CAAN;AACH;AACJ,KATE;;AAUHU,IAAAA,OAAO,EAAGC,OAAD,KAAiC;AACtCR,MAAAA,MAAM,EAAEQ,OAAO,CAACR,MAAR,EAD8B;AAEtCD,MAAAA,OAAO,EAAES,OAAO,CAACT,OAAR;AAF6B,KAAjC;AAVN,GAAP,CADuC,CAA3C;AAkBA,QAAMU,QAAQ,GAAGV,OAAO,IAAIC,MAA5B;AAEA,sBACI,QAAC,GAAD;AACI,IAAA,SAAS,EAAE,8BADf;AAEI,IAAA,KAAK,EAAE;AAACU,MAAAA,MAAM,EAAG,OAAMD,QAAQ,GAAE,OAAF,GAAW,OAAQ;AAA3C,KAFX;AAGI,IAAA,GAAG,EAAER,IAHT;AAAA,cAKKN;AALL;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAnCD;;GAAMD,qB;UAMkCF,O;;;KANlCE,qB;AAqCN,eAAeA,qBAAf","sourcesContent":["import React from \"react\";\nimport {Box} from \"@sanity/ui\";\nimport {DropTargetMonitor, useDrop} from \"react-dnd\";\nimport { NativeTypes } from 'react-dnd-html5-backend'\nimport {Dispatch, InterfaceContentCard, OnDrop} from \"../../components/ContainerMediaComponent/contentCard\";\n\ntype LayoutContainerUploadProps = {\n    setArrayContentCard: Dispatch<InterfaceContentCard[]>;\n    onDrop: OnDrop,\n    typeArrayContentCard?: string\n}\n\nconst LayoutContainerUpload: React.FunctionComponent<LayoutContainerUploadProps> = ({\n   children,\n   onDrop,\n   setArrayContentCard,\n   typeArrayContentCard\n   }) => {\n    const [{ canDrop, isOver }, drop] = useDrop(\n        () => ({\n            accept: [NativeTypes.FILE],\n            drop(inputTarget: { files: any[] }) {\n                if (onDrop) {\n                    const inputTargetFiles = typeArrayContentCard === \"single\"\n                        ? [inputTarget.files[0]]\n                        : inputTarget.files\n                    onDrop(inputTargetFiles, setArrayContentCard)\n                }\n            },\n            collect: (monitor: DropTargetMonitor) => ({\n                isOver: monitor.isOver(),\n                canDrop: monitor.canDrop(),\n            }),\n        }),\n    )\n\n    const isActive = canDrop && isOver\n\n    return (\n        <Box\n            className={\"layout-upload-box__container\"}\n            style={{border: `1px ${isActive? \"green\": \"white\"} dotted`}}\n            ref={drop}\n        >\n            {children}\n        </Box>\n    )\n}\n\nexport default LayoutContainerUpload"]},"metadata":{},"sourceType":"module"}